
type TransferArgs = record { to_account : Account; amount : nat };
type Account = record { owner : principal; subaccount : opt blob };
type Result = variant { Ok : nat; Err : text };
type BlockIndex = nat;
type NumTokens = nat;
type TxIndex = nat;
type Timestamp = nat64;
type Tokens = nat;

type Subscriber = record {
    topic:text;
  };
type MinerTxState = variant {
   Prepared:text;
   Claimed:text;
};

type TransferTxState = variant {
   WaitClaim;
    Claimed;
};

type ComfyUIPayload =
  record {
    promt_id:text;
    client_id:text;
    ai_node:text;
    app_info:text;
    wk_id:text;
    voice_key:text;
    deduce_asset_key:text;
    status:text;
    gmt_datatime:Timestamp;
  };

type WorkLoadLedgerItem =
  record {
    wkload_id : BlockIndex;
    work_load : ComfyUIPayload;
    block_tokens: NumTokens;
    token_pool:text;
    nft_pool:text;
    mining_status : MinerTxState;
  };

type Burn = record {
    from : Account;
    memo : opt vec nat8;
    created_at_time : opt nat64;
    amount : nat;
    spender : opt Account;
};

type Mint = record {
    to : Account;
    memo : opt vec nat8;
    created_at_time : opt nat64;
    amount : nat;
};

type Approve = record {
    fee : opt nat;
    from : Account;
    memo : opt vec nat8;
    created_at_time : opt nat64;
    amount : nat;
    expected_allowance : opt nat;
    expires_at : opt nat64;
    spender : Account;
};

type Transfer = record {
    to : Account;
    fee : opt nat;
    from : Account;
    memo : opt vec nat8;
    created_at_time : opt nat64;
    amount : nat;
    spender : opt Account;
};

type Transaction = record {
    burn : opt Burn;
    kind : text;
    mint : opt Mint;
    approve : opt Approve;
    timestamp : nat64;
    transfer : opt Transfer;
};

type Event0301008 = record {
  topic:text;
  payload:WorkLoadLedgerItem;

};

type UnvMinnerLedgerRecord= record {
     minner:Account;
     meta_workload:WorkLoadLedgerItem;
     block_index:opt BlockIndex;
     trans_tx_index:opt TxIndex;
     tokens:NumTokens;
     gmt_datetime:Timestamp;
     biz_state:TransferTxState;

};

type NftUnivoicePricipal = record {
     owners:vec text
};

type UserIdentityInfo = record {
    user_id:text;
    principalid_txt:text;
    user_nick:text;
};

type MinerWaitClaimBalance = record {
     pricipalid_txt:text;
     tokens:NumTokens; 
};

type TransactionWithId = record {
    id : BlockIndex;
    transaction : Transaction;
};

type GetTransactions = record {
    balance : Tokens;
    transactions : vec TransactionWithId;
    oldest_tx_id : opt BlockIndex;
};

type GetTransactionsErr = record {
    message : text;
};

type GetAccountTransactionsArgs = record {
    account : Account;
    start : opt BlockIndex;
    max_results : nat;
};

type GetTransactionsResult = variant {
    Ok : GetTransactions;
    Err : GetTransactionsErr;
};


service : {
    "greet": (text) -> (text) query;
    "transfer" : (TransferArgs) -> (Result);
    "query_poll_balance" :() -> (Result) ;
    "setup_subscribe": (principal,text) -> ();
    "publish_0301008":(Event0301008) ->(Result);
    "get_all_miner_jnl":() ->(opt vec  UnvMinnerLedgerRecord) query;
    "get_all_miner_jnl_with_principalid":(text) ->(opt vec UnvMinnerLedgerRecord) query;
    "claim_to_account_from_index":(BlockIndex) ->(Result);
    "call_unvoice_for_ext_nft":(NftUnivoicePricipal) ->(Result);
    "sync_userinfo_identity":(vec UserIdentityInfo) ->(Result);
    "gener_nft_owner_wait_claims":(text)->(MinerWaitClaimBalance) query;
    "get_user_balance": (principal) -> (Result);
    "get_account_transactions": (GetAccountTransactionsArgs) -> (GetTransactionsResult);
    "get_miner_license":(text,nat,nat)->(vec nat) query;
}
